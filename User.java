package Practical_17;

public class User {

    public static void main(String[] args) {

        // Create two InventorySystem objects
        InventorySystem inventory1 = new InventorySystem();
        InventorySystem inventory2 = new InventorySystem();

        // Place orders in the inventory1
        Order order1 = new Order(1, "Laptop", 1500.00, 3, "Pending");
        Order order2 = new Order(2, "Iphone", 1000, 7, "Paid");
        Order order3 = new Order(3, "Headphones", 250.00, 5, "Shipped");
        Order order4 = new Order(4, "Monitor", 300.00, 2, "Delivered");

        inventory1.placeOrder(order1);
        inventory1.placeOrder(order2);
        inventory1.placeOrder(order3);
        inventory1.placeOrder(order4);

        // Update an order in the inventory1
        Order updatedOrder = new Order(2, "Iphone", 1000, 7, "Delivered");
        inventory1.updateOrder(updatedOrder);

        // Cancel an order in the inventory1
        inventory1.cancelOrder(1);

        // Track and print orders in inventory1
        System.out.println(" ");
        System.out.println("Details of Order 2: " + inventory1.trackOrder(2));
        inventory1.printOrdersByStatus("Paid");

        // Ilterate through all the items in Inventory 1
        /*for (Order order : inventory1.orderMaps.values()) {
            System.out.println(" ");
            System.out.println(order);
            System.out.println("_________________________________");
        } */

        // Place orders in inventory2
        Order order5 = new Order(5, "Keyboard", 50.00, 10, "Pending");
        Order order6 = new Order(6, "Smartwatch", 120.00, 4, "Paid");
        Order order7 = new Order(7, "Tablet", 250.00, 6, "Processing");

        inventory2.placeOrder(order5);
        inventory2.placeOrder(order6);
        inventory2.placeOrder(order7);

        // Update an order in inventory2
        Order updatedOrder4 = new Order(7, "Tablet", 250.00, 6, "Shipped");
        inventory2.updateOrder(updatedOrder4);

        // Cancel an order in inventory2
        inventory2.cancelOrder(3); // gives an error cause 3 do not exists in inventory2

        // Track and print orders in inventory2
        System.out.println("Details of Order 7: " + inventory2.trackOrder(7));
        inventory2.printOrdersByStatus("Paid");

        // Calculate total revenue for each inventory
        double revenue1 = calculateTotalRevenue(inventory1);
        double revenue2 = calculateTotalRevenue(inventory2);

        // Print the total revenue for each inventory
        System.out.println("----------------------------------- ");
        System.out.println("Total Revenue for Inventory System 1: $" + revenue1);
        System.out.println("Total Revenue for Inventory System 2: $" + revenue2);
        System.out.println("----------------------------------- ");
    }

    //CalculateS total revenue for an inventory
    private static double calculateTotalRevenue(InventorySystem inventorySystem) {
        // Initialize the totalRevenue variable to store the cumulative revenue.
        double totalRevenue = 0.0;
        // Iterate through all orders in the InventorySystem using values() method to get the Collection of orders.
        for (Order order : inventorySystem.getOrdersMap().values()) {
            // Calculate the revenue generated by multiplying the product price with the quantity ordered.
            // Add the calculated revenue to the totalRevenue variable.
            totalRevenue += order.getProductPrice() * order.getQuantity();
        }
        // Return the totalRevenue after processing all orders.
        return totalRevenue;
    }
}

